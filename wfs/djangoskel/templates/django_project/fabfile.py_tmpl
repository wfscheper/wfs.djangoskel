import os

from fabric.api import *
from fabric.contrib import files, console
from fabric import utils


env.home = '/home/django'
env.git_url = '${git_repository}'
env.project = '${project}'

def _setup_path():
    env.root = os.path.join(env.home, env.environment)
    env.code_root = os.path.join(env.root, env.project)
    env.virtualenv_root = os.path.join(env.root, 'env', env.project)
    env.settings = '%(project)s.settings' % env

def staging():
    ''' use staging environment on remote host'''
    env.environment = 'staging'
    env.site_name = '${staging_domain}'
    env.hosts = ['${user}@${staging_host}:${staging_port}']
    env.git_branch = 'develop'
    _setup_path()

def production():
    ''' use production environment on remote host'''
    env.environment = 'production'
    env.site_name = '${production_domain}'
    env.hosts = ['${user}@${production_host}:${production_port}']
    env.git_branch = 'master'
    _setup_path()

def bootstrap():
    ''' initialize remote host environment (virtualenv, deploy, update) '''
    require('code_root', provided_by=('production', 'staging'))
    if not files.exists(env.root):
        sudo('mkdir -p %(root)s' % env, user='django')
    with cd(env.root):
        sudo('git clone %(git_url)s' % env, user='django')
    with cd(env.code_root):
        sudo('git checkout %(git_branch)s && git submodule init && '
             'git submodule update' % env, user='django')
    create_virtualenv()
    update_requirements()

def create_virtualenv():
    ''' setup virtualenv on remote host '''
    require('virtualenv_root', provided_by=('production', 'staging'))
    args = '--clear --no-site-packages --distribute'
    sudo('virtualenv %s %s' % (args, env.virtualenv_root), user='django')

def deploy():
    ''' rsync code to remote host '''
    require('code_root', provided_by=('production', 'staging'))
    if env.environment == 'production':
        if not console.confirm('Are you sure you want to deploy production?',
                               default=False):
            utils.abort('Production deployment aborted.')
    with cd(env.code_root):
        sudo('git pull && git submodule update', user='django')
    symlink_django()

def update_requirements():
    ''' update external dependencies on remote host '''
    require('code_root', provided_by=('production', 'staging'))
    requirements = os.path.join(env.code_root, 'requirements')
    cmd = ['pip install']
    cmd += ['-E %(virtualenv_root)s' % env]
    cmd += ['--requirement %s' % os.path.join(requirements, 'apps.txt')]
    with cd(env.code_root):
        sudo(' '.join(cmd), user='django')

def apache_update_conf():
    '''update apache configuration on remote host'''
    require('code_root', provided_by=('production', 'staging'))
    source = '/%(code_root)s/deployment/apache/%(environment)s.conf' % env
    available = '/etc/apache2/sites-available/%(site_name)s' % env
    enabled = '/etc/apache2/sites-enabled/%(site_name)s' % env
    sudo('ln -ifs %s %s' % (source, available))
    sudo('ln -ifs %s %s' % (available, enabled))
    apache_reload()

def apache_touch():
    """ touch wsgi file to trigger reload """
    require('code_root', provided_by=('production', 'staging'))
    apache_dir = os.path.join(env.code_root, 'deployment', 'apache')
    with cd(apache_dir):
        run('touch %s.wsgi' % env.environment)

def apache_configtest():
    """ test Apache configuration """
    require('root', provided_by=('production', 'staging'))
    sudo('apache2ctl configtest')

def apache_reload():
    """ reload Apache on remote host """
    require('root', provided_by=('production', 'staging'))
    sudo('/etc/init.d/apache2 reload')

def apache_restart():
    """ restart Apache on remote host """
    require('root', provided_by=('production', 'staging'))
    sudo('/etc/init.d/apache2 restart')

def nginx_update_conf():
    '''update nginx configuration on remote host '''
    require('code_root', provided_by=('production', 'staging'))
    source = '/%(code_root)s/deployment/nginx/%(environment)s.conf' % env
    available = '/etc/nginx/sites-available/%(site_name)s' % env
    enabled = '/etc/nginx/sites-enabled/%(site_name)s' % env
    sudo('ln -ifs %s %s' % (source, available))
    sudo('ln -ifs %s %s' % (available, enabled))
    nginx_reload()

def nginx_reload():
    ''' reload nginx on remote host '''
    require('root', provided_by=('production', 'staging'))
    sudo('/etc/init.d/nginx reload')

def nginx_restart():
    ''' restart nginx on remote host '''
    require('root', provided_by=('production', 'staging'))
    sudo('/etc/init.d/nginx restart')

def symlink_django():
    ''' create symbolic link so Nginx can serve static files '''
    require('code_root', provided_by=('production', 'staging'))
    source = '%(code_root)s/static' % env
    dest = '/var/www/%(environment)s/%(project)s' % env
    with cd(env.code_root):
        sudo('%(virtualenv_root)s/bin/python manage.py collectstatic --noinput' % env)
    if not files.exists(dest):
        sudo('mkdir -p %s' % dest, user='www-data')
    if not files.exists('%s/static' % dest):
        sudo('ln -s %s %s' % (source, dest), user='www-data')

def symlink_supervisor():
    '''setup supervisor config'''
    require('code_root', provided_by=('production', 'staging'))
    source = '%(code_root)s/deployment/supervisor/%(environment)s.conf' % env
    dest = '/etc/supervisor/conf.d/%(site_name)s.conf' % env
    if not files.exists(dest):
        sudo('ln -s %s %s' % (source, dest))
        sudo('/etc/init.d/supervisor stop && /etc/init.d/supervisor start')
